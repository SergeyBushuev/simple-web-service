CREATE TABLE IF NOT EXISTS posts
(
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar(256) NOT NULL,
    text  text,
    image bytea,
    likes int DEFAULT 0
);

CREATE TABLE IF NOT EXISTS comments
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id bigint NOT NULL,
    text    text   NOT NULL,
    FOREIGN KEY (post_id)
        REFERENCES posts (id)
        ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS tags
(
    tag varchar(30) PRIMARY KEY
);


CREATE TABLE IF NOT EXISTS post_tags
(
    post_id BIGINT REFERENCES posts ON DELETE CASCADE,
    tag_id  VARCHAR REFERENCES tags,
    PRIMARY KEY (post_id, tag_id)
);

CREATE OR REPLACE FUNCTION delete_redundant_tags()
    RETURNS TRIGGER
AS
$$
BEGIN
    DELETE FROM tags
    WHERE NOT EXISTS (
        SELECT FROM post_tags
        WHERE post_tags.tag_id = old.tag_id
    ) AND old.tag_id = tags.tag;
    RETURN old;
END;
$$
    LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER auto_delete_tags
    AFTER DELETE ON post_tags
    FOR EACH ROW EXECUTE PROCEDURE delete_redundant_tags();


CREATE OR REPLACE FUNCTION create_new_tags()
    RETURNS TRIGGER
AS
$$
BEGIN
    INSERT INTO tags VALUES (new.tag_id) ON CONFLICT (tag) DO NOTHING;
    return new;
END;
$$
    LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER auto_create_tags
    BEFORE INSERT ON post_tags
    FOR EACH ROW EXECUTE PROCEDURE create_new_tags();


-- INSERT INTO posts VALUES
--                       (default, 'newArticle4', 'tetetetetete', NULL, default);
--
-- INSERT INTO tags VALUES
--     ('tag');
--
-- INSERT INTO post_tags VALUES
--                       (1, 'tag');
--
-- SELECT * FROM posts
-- JOIN post_tags on posts.id = post_tags.post_id AND post_tags.tag_id='tag';
--
-- INSERT INTO comments VALUES
--                       (default, 1, 'nice!');
--
-- SELECT * FROM comments
--     where comments.post_id = 1;
--
-- SELECT tags.tag FROM tags
-- JOIN post_tags pt on tags.tag = pt.tag_id WHERE pt.post_id=1

delete from post_tags where post_tags.post_id = 10;